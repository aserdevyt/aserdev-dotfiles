#!/usr/bin/env bash
# üß† aserdev's Rofi Control Center v5.3 ‚Äî "Self-Aware Edition"

TERMINAL="kitty" # change if u use another one

main_menu() {
  options=(
    "‚öôÔ∏è  Settings"
    "üöÄ  Run Command"
    "üì¶  Install"
    "üìã  Clipboard"
    "üòÄ  Emoji Picker"
    "üß†  System Info"
    "üîã  Power"
    "‚ÑπÔ∏è  About"
  )

  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Aser Control Center")

  case "$choice" in
    "‚öôÔ∏è  Settings") settings_menu ;;
    "üöÄ  Run Command") rofi -show run ;;
    "üì¶  Install") install_menu ;;
    "üìã  Clipboard") clipboard_menu ;;
    "üòÄ  Emoji Picker") rofi -show emoji ;;
    "üß†  System Info") sysinfo_menu ;;
    "üîã  Power") wlogout ;;
    "‚ÑπÔ∏è  About") rofi -e "Made by aserdev üíª Arch btw ü¶¶ website: https://aserdevyt.github.io/
 TYSM:hyprland,wayland,archlinux,waybar,rofi-wayland,rofi-emoji,pluma,grimblast,aur,yay,brokefetch" ;;
    *) exit 0 ;;
  esac
}

settings_menu() {
  options=(
    "üåÄ  Hyprland"
    "üß≠  Waybar"
    "üéõÔ∏è  Rofi"
    "üñºÔ∏è  Wallpaper"
    "‚¨ÖÔ∏è  Back"
  )

  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Settings")

  case "$choice" in
    "üåÄ  Hyprland") thunar ~/.config/hypr & ;;
    "üß≠  Waybar")
      thunar ~/.config/waybar &
      pid=$!
      wait $pid
      pkill -SIGUSR2 waybar && notify-send "‚úÖ Waybar Reloaded" "Changes applied successfully"
      ;;
    "üéõÔ∏è  Rofi") thunar ~/.config/rofi & ;;
    "üñºÔ∏è  Wallpaper") waypaper --open & ;;
    "‚¨ÖÔ∏è  Back") main_menu ;;
    *) exit 0 ;;
  esac
}

install_menu() {
  options=(
    "üèóÔ∏è  AUR (yay)"
    "üì¶  Pacman"
    "üì¶  Flatpak"
    "üîÑ  Update All"
    "‚¨ÖÔ∏è  Back"
  )

  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Install")

  case "$choice" in
    "üèóÔ∏è  AUR (yay)")
      pkg=$(rofi -dmenu -p "AUR package:")
      [ -n "$pkg" ] && $TERMINAL -e bash -c "yay -S $pkg; read -p 'Press enter to exit...'"
      ;;
    "üì¶  Pacman")
      pkg=$(rofi -dmenu -p "Pacman package:")
      [ -n "$pkg" ] && $TERMINAL -e bash -c "sudo pacman -S $pkg; read -p 'Press enter to exit...'"
      ;;
    "üì¶  Flatpak")
      pkg=$(rofi -dmenu -p "Flatpak package:")
      [ -n "$pkg" ] && $TERMINAL -e bash -c "flatpak install -y $pkg; read -p 'Press enter to exit...'"
      ;;
    "üîÑ  Update All")
      $TERMINAL -e bash -c '
        echo "Updating system..."; 
        sudo pacman -Syu --noconfirm;
        flatpak update -y;
        if command -v yay &>/dev/null; then yay -Syu --noconfirm; fi;
        echo "‚úÖ All updates done!"; 
        read -p "Press enter to exit..."
      '
      ;;
    "‚¨ÖÔ∏è  Back") main_menu ;;
    *) exit 0 ;;
  esac
}

clipboard_menu() {
  options=(
    "üìã  Open Clipboard History"
    "üßπ  Clear Clipboard History"
    "‚¨ÖÔ∏è  Back"
  )

  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Clipboard")

  case "$choice" in
    "üìã  Open Clipboard History") rofi-cliphist ;;
    "üßπ  Clear Clipboard History")
      cliphist wipe && notify-send "üßπ Clipboard Cleared"
      ;;
    "‚¨ÖÔ∏è  Back") main_menu ;;
    *) exit 0 ;;
  esac
}

ask_install() {
  app="$1"
  if ! command -v "$app" &>/dev/null; then
    ans=$(printf "Yes\nNo" | rofi -dmenu -p "$app not found. Install?")
    if [[ "$ans" == "Yes" ]]; then
      if command -v yay &>/dev/null; then
        $TERMINAL -e bash -c "yay -S $app; read -p 'Press enter to exit...'"
      else
        $TERMINAL -e bash -c "sudo pacman -S $app; read -p 'Press enter to exit...'"
      fi
    else
      rofi -e "Skipping installation of $app."
      return 1
    fi
  fi
}

sysinfo_menu() {
  options=(
    "üß†  Brokefetch"
    "‚ö°  Fastfetch"
    "üìä  Btop"
    "‚¨ÖÔ∏è  Back"
  )

  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "System Info")

  case "$choice" in
    "üß†  Brokefetch")
      if command -v brokefetch &>/dev/null; then
        $TERMINAL -e bash -c "brokefetch; echo ''; read -p 'Press enter to exit...'"
      else
        ans=$(printf "Install\nOpen GitHub" | rofi -dmenu -p "Brokefetch not found")
        [[ "$ans" == "Install" ]] && ask_install "brokefetch"
        [[ "$ans" == "Open GitHub" ]] && xdg-open "https://github.com/Szerwigi1410/brokefetch" &
      fi
      ;;
    "‚ö°  Fastfetch")
      ask_install "fastfetch" || return
      $TERMINAL -e bash -c "fastfetch; echo ''; read -p 'Press enter to exit...'"
      ;;
    "üìä  Btop")
      ask_install "btop" || return
      $TERMINAL -e bash -c "btop; echo ''; read -p 'Press enter to exit...'"
      ;;
    "‚¨ÖÔ∏è  Back") main_menu ;;
    *) exit 0 ;;
  esac
}

main_menu

