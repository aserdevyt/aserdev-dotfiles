#!/usr/bin/env bash
# üß† aserdev's Rofi Control Center ‚Äî Remade (Pluma + paused fetches)
# "Keybinds + Hyprpicker + Audio + All Settings"
# Minimal deps: rofi, notify-send, wl-clipboard (wl-copy), a terminal (kitty preferred)
set -euo pipefail
IFS=$'\n\t'

# ===== Configurable vars =====
TERMINAL="${TERMINAL:-kitty}"
EDITOR="${EDITOR:-nano}"          # fallback editor inside terminal
ROFI_CMD="${ROFI_CMD:-rofi -dmenu -i -p}"  # helper for dmenu prompts

# helper: display a rofi yes/no menu, returns 0 for yes
rofi_yn() {
  local prompt="${1:-Proceed?}"
  local ans
  ans=$(printf 'Yes\nNo' | rofi -dmenu -p "$prompt")
  [[ "$ans" == "Yes" ]]
}

# Ask-install: prompts via rofi, installs in a new terminal via yay or pacman
ask_install() {
  local pkg="$1"
  local bin="${2:-$1}"
  if command -v "$bin" &>/dev/null; then
    return 0
  fi

  if ! rofi_yn "$pkg not found. Install?"; then
    $ROFI_CMD "Skipping" <<< "Skipping installation of $pkg." >/dev/null 2>&1 || true
    return 1
  fi

  # prefer yay if present
  if command -v yay &>/dev/null; then
    $TERMINAL -e bash -c "yay -S --noconfirm $pkg || (echo 'install failed'; read -p 'Press enter...')"
  else
    $TERMINAL -e bash -c "sudo pacman -S --noconfirm $pkg || (echo 'install failed'; read -p 'Press enter...')"
  fi

  # final check
  command -v "$bin" &>/dev/null
}

# Convenience function: open path in Thunar, auto-install Thunar if missing
open_in_thunar() {
  local path="${1:-$HOME}"
  if ! command -v thunar &>/dev/null; then
    if ask_install "thunar"; then
      sleep 0.5
    else
      # fallback to xdg-open if thunar refused
      xdg-open "$path" >/dev/null 2>&1 || $TERMINAL -e "$EDITOR" "$path"
      return
    fi
  fi
  thunar "$path" &
}

# Helper: open a file in pluma (GUI) if available, else in $TERMINAL with $EDITOR and pause
open_file_gui_or_terminal() {
  local file="$1"
  if command -v pluma &>/dev/null; then
    pluma "$file" &
  else
    $TERMINAL -e bash -c "$EDITOR \"$file\"; echo; read -p 'Press enter to exit...'"
  fi
}

# ===== Settings Menu =====
settings_menu() {
  local options=(
"üåÄ  Hyprland"
"üß≠  Waybar"
"üéõÔ∏è  Rofi"
"üñºÔ∏è  Wallpaper"
"‚å®Ô∏è  Keybinds"
"üé®  Color Picker"
"üîä  Audio Settings"
"üóÇÔ∏è  All Settings"
"‚¨ÖÔ∏è  Back"
  )
  local choice
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Settings")

  case "$choice" in
    "üåÄ  Hyprland")
      open_in_thunar "$HOME/.config/hypr"
      ;;
"üß≠  Waybar")
  # open the folder (will auto-install thunar if needed)
  open_in_thunar "$HOME/.config/waybar"
  ;;

    "üéõÔ∏è  Rofi")
      open_in_thunar "$HOME/.config/rofi"
      ;;
    "üñºÔ∏è  Wallpaper")
      if command -v waypaper &>/dev/null; then
        waypaper --open &
      else
        ask_install "waypaper" || rofi -e "No wallpaper tool found"
      fi
      ;;
    "‚å®Ô∏è  Keybinds")
      if [[ -f ~/.config/hypr/binds.conf ]]; then
        open_file_gui_or_terminal "$HOME/.config/hypr/binds.conf"
      else
        rofi -e "binds.conf not found üò≠"
      fi
      ;;
    "üé®  Color Picker")
      ask_install "hyprpicker" || return
      if color=$(hyprpicker -a 2>/dev/null); then
        if [[ -n "${color-}" ]]; then
          command -v wl-copy &>/dev/null && wl-copy "$color" || printf "%s" "$color" | xclip -selection clipboard
          notify-send "Color" "Copied: $color"
        else
          rofi -e "No color picked üíÄ"
        fi
      else
        rofi -e "hyprpicker failed"
      fi
      ;;
    "üîä  Audio Settings")
      # prefer pavucontrol (PulseAPI/pipewire through pipewire-pulse) or helvum
      if command -v pactl &>/dev/null || command -v pacmd &>/dev/null; then
        ask_install "pavucontrol" || return
        pavucontrol &
      elif command -v pw-cli &>/dev/null; then
        if command -v helvum &>/dev/null; then
          helvum &
        else
          ask_install "helvum" || return
          helvum &
        fi
      else
        rofi -e "No audio subsystem detected üíÄ"
      fi
      ;;
    "üóÇÔ∏è  All Settings")
      open_in_thunar "$HOME/.config"
      ;;
    "‚¨ÖÔ∏è  Back")
      main_menu
      ;;
  esac
}

# ===== Install Menu =====
install_menu() {
  local options=(
"üèóÔ∏è  AUR (yay)"
"üì¶  Pacman"
"üì¶  Flatpak"
"üîÑ  Update All"
"‚¨ÖÔ∏è  Back"
  )
  local choice
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Install")

  case "$choice" in
"üèóÔ∏è  AUR (yay)")
  pkg=$(rofi -dmenu -p "AUR package:")
  [[ -n "$pkg" ]] && $TERMINAL -e bash -c "yay -S $pkg; read -p 'Press enter to exit...'"
  ;;


    "üì¶  Pacman")
      mode=$(printf "üîç Search\nüì¶ Direct Install" | rofi -dmenu -p "Pacman Mode")
      if [[ "$mode" == "üîç Search" ]]; then
        query=$(rofi -dmenu -p "Search Pacman:")
        [[ -z "$query" ]] && return
        results=$(pacman -Ss "$query" | awk '{print $1}' | sed 's/.*\///' | head -n 50)
        pkg=$(printf '%s\n' "$results" | rofi -dmenu -p "Select package:")
        [[ -z "$pkg" ]] && return
      else
        pkg=$(rofi -dmenu -p "Pacman package:")
      fi
      [[ -n "$pkg" ]] && $TERMINAL -e bash -c "sudo pacman -S $pkg; read -p 'Press enter to exit...'"
      ;;

    "üì¶  Flatpak")
      mode=$(printf "üîç Search\nüì¶ Direct Install" | rofi -dmenu -p "Flatpak Mode")
      if [[ "$mode" == "üîç Search" ]]; then
        query=$(rofi -dmenu -p "Search Flatpak:")
        [[ -z "$query" ]] && return
        results=$(flatpak search "$query" | awk 'NR>1 {print $1}' | head -n 50)
        pkg=$(printf '%s\n' "$results" | rofi -dmenu -p "Select Flatpak package:")
        [[ -z "$pkg" ]] && return
      else
        pkg=$(rofi -dmenu -p "Flatpak package (ID):")
      fi
      [[ -n "$pkg" ]] && $TERMINAL -e bash -c "flatpak install -y $pkg; read -p 'Press enter to exit...'"
      ;;

    "üîÑ  Update All")
      $TERMINAL -e bash -c '
echo "Updating system..."
sudo pacman -Syu --noconfirm || true
flatpak update -y || true
if command -v yay &>/dev/null; then yay -Syu --noconfirm || true; fi
echo "‚úÖ All updates done!"
read -p "Press enter to exit..."
'
      ;;
    "‚¨ÖÔ∏è  Back") main_menu ;;
  esac
}

# ===== Clipboard Menu =====
clipboard_menu() {
  local options=(
"üìã  Open Clipboard History"
"üßπ  Clear Clipboard History"
"‚¨ÖÔ∏è  Back"
  )
  local choice
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Clipboard")

  case "$choice" in
    "üìã  Open Clipboard History")
      if [[ -x ~/.local/bin/rofi-cliphist ]]; then
        bash ~/.local/bin/rofi-cliphist
      else
        ask_install "cliphist" || rofi -e "No cliphist found"
      fi
      ;;
    "üßπ  Clear Clipboard History")
      if command -v cliphist &>/dev/null; then
        cliphist wipe && notify-send "Clipboard" "Cleared"
      else
        rofi -e "No cliphist available"
      fi
      ;;
    "‚¨ÖÔ∏è  Back") main_menu ;;
  esac
}

# ===== Screenshot / Record =====
screenshot_menu() {
  local options=(
"üñ•Ô∏è  Screenshot Screen"
"üü©  Screenshot Area"
"üé•  Screen Record (OBS)"
"‚¨ÖÔ∏è  Back"
  )
  local choice
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Screenshot / Record")

  case "$choice" in
    "üñ•Ô∏è  Screenshot Screen")
      ask_install "grimblast" || return
      grimblast copysave screen --notify
      notify-send "Screenshot" "Full screen saved & copied"
      ;;
    "üü©  Screenshot Area")
      ask_install "grimblast" || return
      grimblast copysave area --notify
      notify-send "Screenshot" "Area saved & copied"
      ;;
    "üé•  Screen Record (OBS)")
      if ! command -v obs &>/dev/null; then
        if rofi_yn "OBS not found. Install?"; then
          if command -v yay &>/dev/null; then
            $TERMINAL -e bash -c "yay -S obs-studio; read -p 'Press enter...'"
          else
            $TERMINAL -e bash -c "sudo pacman -S obs-studio --noconfirm; read -p 'Press enter...'"
          fi
        else
          rofi -e "Skipping OBS installation."
          return
        fi
      fi
      obs & disown
      ;;
    "‚¨ÖÔ∏è  Back") main_menu ;;
  esac
}

# ===== System Info =====
sysinfo_menu() {
  local options=(
"üß†  Brokefetch"
"‚ö°  Fastfetch"
"üìä  Btop"
"‚¨ÖÔ∏è  Back"
  )
  local choice
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "System Info")

  case "$choice" in
    "üß†  Brokefetch")
      if command -v brokefetch &>/dev/null; then
        $TERMINAL -e bash -c "brokefetch; echo; read -p 'Press enter to exit...'"
      else
        ans=$(printf 'Install\nOpen GitHub' | rofi -dmenu -p "Brokefetch not found")
        [[ "$ans" == "Install" ]] && ask_install "brokefetch"
        [[ "$ans" == "Open GitHub" ]] && xdg-open "https://github.com/Szerwigi1410/brokefetch" &
      fi
      ;;
    "‚ö°  Fastfetch")
      ask_install "fastfetch" || return
      $TERMINAL -e bash -c "fastfetch; echo; read -p 'Press enter to exit...'"
      ;;
    "üìä  Btop")
      ask_install "btop" || return
      $TERMINAL -e bash -c "btop; echo; read -p 'Press enter to exit...'"
      ;;
    "‚¨ÖÔ∏è  Back") main_menu ;;
  esac
}

# ===== Main Menu =====
main_menu() {
  local options=(
"‚öôÔ∏è  Settings"
"üöÄ  Run Command"
"üì¶  Install"
"üìã  Clipboard"
"üòÄ  Emoji Picker"
"üì∏  Screenshot / Record"
"üß†  System Info"
"üîã  Power"
"‚ÑπÔ∏è  About"
  )
  local choice
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Aser Control Center")

  case "$choice" in
    "‚öôÔ∏è  Settings") settings_menu ;;
    "üöÄ  Run Command") rofi -show run ;;
    "üì¶  Install") install_menu ;;
    "üìã  Clipboard") clipboard_menu ;;
    "üòÄ  Emoji Picker") rofi -show emoji ;;
    "üì∏  Screenshot / Record") screenshot_menu ;;
    "üß†  System Info") sysinfo_menu ;;
    "üîã  Power") if command -v wlogout &>/dev/null; then wlogout; else rofi -e "wlogout not installed"; fi ;;
    "‚ÑπÔ∏è  About") xdg-open "https://github.com/aserdevyt/aserdev-os/" ;;
    *) exit 0 ;;
  esac
}

# ===== Start =====
main_menu

