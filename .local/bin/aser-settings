#!/usr/bin/env bash
# 🧠 aserdev's Rofi Control Center v5.5 — "Screenshot Copy Edition"

TERMINAL="kitty" # change if u use another terminal

# 💬 Function to auto-install missing apps
ask_install() {
  app="$1"
  bin="${2:-$1}" # allows checking a different binary name
  if ! command -v "$bin" &>/dev/null; then
    ans=$(printf "Yes\nNo" | rofi -dmenu -p "$app not found. Install?")
    if [[ "$ans" == "Yes" ]]; then
      if command -v yay &>/dev/null; then
        $TERMINAL -e bash -c "yay -S $app; read -p 'Press enter to exit...'"
      else
        $TERMINAL -e bash -c "sudo pacman -S $app --noconfirm; read -p 'Press enter to exit...'"
      fi
    else
      rofi -e "Skipping installation of $app."
      return 1
    fi
  fi
}

# ⚙️ Settings Menu
settings_menu() {
  options=(
    "🌀  Hyprland"
    "🧭  Waybar"
    "🎛️  Rofi"
    "🖼️  Wallpaper"
    "⬅️  Back"
  )
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Settings")

  case "$choice" in
    "🌀  Hyprland") thunar ~/.config/hypr & ;;
    "🧭  Waybar")
      thunar ~/.config/waybar &
      wait $!
      pkill -SIGUSR2 waybar && notify-send "✅ Waybar Reloaded" "Changes applied successfully"
      ;;
    "🎛️  Rofi") thunar ~/.config/rofi & ;;
    "🖼️  Wallpaper") waypaper --open & ;;
    "⬅️  Back") main_menu ;;
  esac
}

# 📦 Install Menu
install_menu() {
  options=(
    "🏗️  AUR (yay)"
    "📦  Pacman"
    "📦  Flatpak"
    "🔄  Update All"
    "⬅️  Back"
  )
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Install")

  case "$choice" in
    "🏗️  AUR (yay)")
      pkg=$(rofi -dmenu -p "AUR package:")
      [ -n "$pkg" ] && $TERMINAL -e bash -c "yay -S $pkg; read -p 'Press enter to exit...'"
      ;;
    "📦  Pacman")
      pkg=$(rofi -dmenu -p "Pacman package:")
      [ -n "$pkg" ] && $TERMINAL -e bash -c "sudo pacman -S $pkg; read -p 'Press enter to exit...'"
      ;;
    "📦  Flatpak")
      pkg=$(rofi -dmenu -p "Flatpak package:")
      [ -n "$pkg" ] && $TERMINAL -e bash -c "flatpak install -y $pkg; read -p 'Press enter to exit...'"
      ;;
    "🔄  Update All")
      $TERMINAL -e bash -c '
        echo "Updating system..."; 
        sudo pacman -Syu --noconfirm;
        flatpak update -y;
        if command -v yay &>/dev/null; then yay -Syu --noconfirm; fi;
        echo "✅ All updates done!"; 
        read -p "Press enter to exit..."
      '
      ;;
    "⬅️  Back") main_menu ;;
  esac
}

# 📋 Clipboard Menu
clipboard_menu() {
  options=(
    "📋  Open Clipboard History"
    "🧹  Clear Clipboard History"
    "⬅️  Back"
  )
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Clipboard")

  case "$choice" in
    "📋  Open Clipboard History") rofi-cliphist ;;
    "🧹  Clear Clipboard History") cliphist wipe && notify-send "🧹 Clipboard Cleared" ;;
    "⬅️  Back") main_menu ;;
  esac
}

# 📸 Screenshot / Record Menu
# 📸 Screenshot / Record Menu
screenshot_menu() {
  options=(
    "🖥️  Screenshot Screen"
    "🟩  Screenshot Area"
    "🎥  Screen Record (OBS)"
    "⬅️  Back"
  )
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Screenshot / Record")

  case "$choice" in
    "🖥️  Screenshot Screen")
      ask_install "grimblast" || return
      grimblast copysave screen --notify
      notify-send "📸 Screenshot Taken!" "Full screen saved + copied ✅"
      ;;
    "🟩  Screenshot Area")
      ask_install "grimblast" || return
      grimblast copysave area --notify
      notify-send "📸 Screenshot Taken!" "Area saved + copied ✅"
      ;;
    "🎥  Screen Record (OBS)")
      # fix check for obs binary, not obs-studio
      if ! command -v obs &>/dev/null; then
        ans=$(printf "Yes\nNo" | rofi -dmenu -p "OBS not found. Install?")
        if [[ "$ans" == "Yes" ]]; then
          if command -v yay &>/dev/null; then
            $TERMINAL -e bash -c "yay -S obs-studio; read -p 'Press enter to exit...'"
          else
            $TERMINAL -e bash -c "sudo pacman -S obs-studio --noconfirm; read -p 'Press enter to exit...'"
          fi
        else
          rofi -e "Skipping OBS installation."
          return
        fi
      fi
      obs & disown
      ;;
    "⬅️  Back") main_menu ;;
  esac
}

# 🧠 System Info Menu
sysinfo_menu() {
  options=(
    "🧠  Brokefetch"
    "⚡  Fastfetch"
    "📊  Btop"
    "⬅️  Back"
  )
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "System Info")

  case "$choice" in
    "🧠  Brokefetch")
      if command -v brokefetch &>/dev/null; then
        $TERMINAL -e bash -c "brokefetch; echo ''; read -p 'Press enter to exit...'"
      else
        ans=$(printf "Install\nOpen GitHub" | rofi -dmenu -p "Brokefetch not found")
        [[ "$ans" == "Install" ]] && ask_install "brokefetch"
        [[ "$ans" == "Open GitHub" ]] && xdg-open "https://github.com/Szerwigi1410/brokefetch" &
      fi
      ;;
    "⚡  Fastfetch")
      ask_install "fastfetch" || return
      $TERMINAL -e bash -c "fastfetch; echo ''; read -p 'Press enter to exit...'"
      ;;
    "📊  Btop")
      ask_install "btop" || return
      $TERMINAL -e bash -c "btop; echo ''; read -p 'Press enter to exit...'"
      ;;
    "⬅️  Back") main_menu ;;
  esac
}

# 🏠 Main Menu
main_menu() {
  options=(
    "⚙️  Settings"
    "🚀  Run Command"
    "📦  Install"
    "📋  Clipboard"
    "😀  Emoji Picker"
    "📸  Screenshot / Record"
    "🧠  System Info"
    "🔋  Power"
    "ℹ️  About"
  )
  choice=$(printf '%s\n' "${options[@]}" | rofi -dmenu -i -p "Aser Control Center")

  case "$choice" in
    "⚙️  Settings") settings_menu ;;
    "🚀  Run Command") rofi -show run ;;
    "📦  Install") install_menu ;;
    "📋  Clipboard") clipboard_menu ;;
    "😀  Emoji Picker") rofi -show emoji ;;
    "📸  Screenshot / Record") screenshot_menu ;;
    "🧠  System Info") sysinfo_menu ;;
    "🔋  Power") wlogout ;;
    "ℹ️  About") rofi -e "Made by aserdev 💻 Arch btw 🦦 website: https://aserdevyt.github.io/
TYSM: hyprland, wayland, archlinux, waybar, rofi-wayland, rofi-emoji, pluma, grimblast, aur, yay, brokefetch" ;;
  esac
}

# 🚀 Start it up
main_menu

