#!/usr/bin/env bash
# aserdev's improved Arch dotfile installer â€” merges configs safely ðŸ’€
# Now merged with: oh-my-zsh install + powerlevel10k + plugins + .zshrc writer
set -euo pipefail
IFS=$'\n\t'

WORKSPACE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HOME_DIR="${HOME:-/root}"
SILENT=0

# Packages list
PKGS=(
  htop btop hyprland hyprpaper grimblast hyprpicker waybar rofi-wayland rofi-emoji swaync waypaper
  xdg-desktop-portal-hyprland kitty thunar pluma qt5ct qt6ct cmake cpio glaze hyprland-protocols
  uwsm grimblast-git libnotify hyprpicker wl-clipboard otf-font-awesome xsel xclip gvfs slurp grim
  zsh imagemagick python-pygments libcanberra catfish gvfs tumbler thunar-volman
  thunar-archive-plugin thunar-media-tags-plugin ffmpegthumbnailer poppler-glib yt-dlp ffmpeg
  libgsf nvim vi vim nano less git curl wget aria2 microsoft-edge-stable libgepub libopenraw
  freetype2 plocate zeitgeist python-requests file-roller unzip unrar discord pipewire
  pipewire-alsa pipewire-jack pipewire-pulse pipewire-v4l2 gst-plugin-pipewire wireplumber
  pavucontrol pamixer pulsemixer paprefs networkmanager network-manager-applet nm-connection-editor
  libnm networkmanager-openvpn networkmanager-pptp networkmanager-vpnc networkmanager-openconnect
  networkmanager-l2tp networkmanager-strongswan cliphist bat yay wlogout ttf-jetbrains-mono-nerd
  fcitx5 fcitx5-configtool fcitx5-qt fcitx5-gtk fcitx5-mozc fastfetch dracula-gtk-theme
  colloid-icon-theme noto-fonts-emoji ttf-iosevka-nerd pavucontrol vlc vlc-plugins-all fzf bat polkit-gnome visual-studio-code-bin qbittorrent
)

# Files/dirs to skip copying from workspace
SKIP_BASENAMES=( ".git" ".gitignore" ".DS_Store" "install" )

# oh-my-zsh targets (install into runner's ~)
ZSH_DIR="$HOME_DIR/.oh-my-zsh"
ZSH_CUSTOM="$ZSH_DIR/custom"
PLUGINS_DIR="$ZSH_CUSTOM/plugins"
THEMES_DIR="$ZSH_CUSTOM/themes"
ZSHRC="$HOME_DIR/.zshrc"

log()   { printf '%s\n' "$*"; }
debug() { log "[DEBUG] $*"; }
info()  { log "[INFO]  $*"; }
err()   { log "[ERROR] $*" >&2; }

ask_yes_no() {
  local prompt="${1:-Continue? [y/N]: }"
  if [[ $SILENT -eq 1 ]]; then
    return 1
  fi
  read -r -p "$prompt" ans
  [[ "$ans" =~ ^[Yy]$ ]]
}

check_internet() {
  debug "Checking internet connectivity..."
  if ping -c 1 -W 2 archlinux.org &>/dev/null; then
    debug "Internet OK."
  else
    err "No internet connection detected. Exiting."
    exit 1
  fi
}

ensure_yay() {
  if ! command -v yay &>/dev/null; then
    info "yay not found. Installing..."
    sudo pacman -S --noconfirm --needed git base-devel
    tmpdir="$(mktemp -d)"
    git clone https://aur.archlinux.org/yay.git "$tmpdir"
    pushd "$tmpdir" >/dev/null
    makepkg -si --noconfirm
    popd >/dev/null
    rm -rf "$tmpdir"
  else
    debug "yay is already installed."
  fi
}

install_packages() {
  info "Installing packages with yay..."
  yay -Syu --noconfirm --needed "${PKGS[@]}"
}

install_gdm() {
  if ! pacman -Qi gdm &>/dev/null; then
    info "Installing GDM..."
    sudo pacman -S --noconfirm gdm
  else
    debug "GDM already installed."
  fi
  info "Enabling GDM..."
  sudo systemctl enable gdm
}

enable_services() {
  info "Checking and enabling essential services (system-wide)..."

  # --- NetworkManager check ---
  if ! systemctl is-active --quiet NetworkManager; then
    info "NetworkManager not running, enabling it globally..."
    sudo systemctl enable --now NetworkManager.service
  else
    debug "NetworkManager is active âœ…"
  fi

  # --- PipeWire check ---
  if ! systemctl --user is-active --quiet pipewire 2>/dev/null; then
    info "PipeWire not running for current user, enabling global user services..."
    sudo systemctl enable --global pipewire.service pipewire-pulse.service wireplumber.service
    info "Enabled PipeWire globally (for all users)"
  else
    debug "PipeWire already active âœ…"
  fi
}

copy_workspace() {
  if ! command -v rsync &>/dev/null; then
    echo "[DEBUG] rsync not found. Installing..."
    sudo pacman -S --noconfirm rsync
  fi

  debug "Merging files from workspace: $WORKSPACE_DIR â†’ $HOME_DIR"
  shopt -s nullglob dotglob
  local items=( "$WORKSPACE_DIR"/* )
  shopt -u dotglob

  for ITEM in "${items[@]}"; do
    local BASENAME TARGET
    BASENAME="$(basename "$ITEM")"
    TARGET="$HOME_DIR/$BASENAME"

    for skip in "${SKIP_BASENAMES[@]}"; do
      [[ "$BASENAME" == "$skip" ]] && { debug "Skipping $BASENAME"; continue 2; }
    done

    debug "Processing $BASENAME â†’ $TARGET"

    if [[ -d "$ITEM" && ! -L "$ITEM" ]]; then
      debug "Merging directory $BASENAME"
      mkdir -p "$TARGET"
      rsync -a --info=NAME --omit-dir-times -- "$ITEM"/ "$TARGET"/
      info "Merged $BASENAME âœ…"
    else
      if [[ -e "$TARGET" ]]; then
        if [[ $SILENT -eq 0 ]]; then
          ask_yes_no "Replace $TARGET? [y/N]: " || { debug "Skipped $BASENAME"; continue; }
        fi
      fi
      cp -a -- "$ITEM" "$TARGET"
      info "Installed $BASENAME âœ…"
    fi
  done
}

# --- oh-my-zsh + p10k + plugins stuff ---
clone_if_missing() {
  local repo="$1"
  local dest="$2"
  local name="$3"
  if [[ -d "$dest" && -d "$dest/.git" ]]; then
    info "$name already present (git repo) â€” skipping clone."
    return 0
  fi
  if [[ -d "$dest" && ! -d "$dest/.git" ]]; then
    info "$name directory exists (non-git) â€” skipping clone."
    return 0
  fi
  info "Cloning $name â†’ $dest"
  git clone --depth=1 "$repo" "$dest"
}

install_oh_my_zsh() {
  if [[ -d "$ZSH_DIR" && -f "$ZSH_DIR/oh-my-zsh.sh" ]]; then
    info "oh-my-zsh already installed at $ZSH_DIR â€” skipping clone."
  else
    info "Installing oh-my-zsh into $ZSH_DIR..."
    git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git "$ZSH_DIR"
  fi
  mkdir -p "$PLUGINS_DIR" "$THEMES_DIR"
}

install_powerlevel10k() {
  local dest="$THEMES_DIR/powerlevel10k"
  clone_if_missing https://github.com/romkatv/powerlevel10k.git "$dest" "powerlevel10k"
}

install_plugins() {
  local -a plugins=(
    "https://github.com/zsh-users/zsh-autosuggestions.git|$PLUGINS_DIR/zsh-autosuggestions|zsh-autosuggestions"
    "https://github.com/zsh-users/zsh-syntax-highlighting.git|$PLUGINS_DIR/zsh-syntax-highlighting|zsh-syntax-highlighting"
    "https://github.com/zsh-users/zsh-completions.git|$PLUGINS_DIR/zsh-completions|zsh-completions"
    "https://github.com/Aloxaf/fzf-tab.git|$PLUGINS_DIR/fzf-tab|fzf-tab"
    "https://github.com/denysdovhan/you-should-use.git|$PLUGINS_DIR/you-should-use|you-should-use"
  )

  for entry in "${plugins[@]}"; do
    IFS='|' read -r repo dest name <<< "$entry"
    clone_if_missing "$repo" "$dest" "$name"
  done
}

write_zshrc() {
  info "Writing ${ZSHRC} (backing up old one if present)..."
  if [[ -f "$ZSHRC" ]]; then
    cp -a "$ZSHRC" "${ZSHRC}.bak.$(date +%s)"
    info "Backed up existing .zshrc to ${ZSHRC}.bak.<ts>"
  fi

  cat > "$ZSHRC" <<'EOF'
# --- autogenerated by aserdev installer ---
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

plugins=(git archlinux z zsh-autosuggestions zsh-syntax-highlighting zsh-completions fzf-tab you-should-use sudo colored-man-pages)

# enable oh-my-zsh core
source "$ZSH/oh-my-zsh.sh"

# plugin sources (explicit; kept as you requested)
source "$ZSH/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" || true
source "$ZSH/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" || true
source "$ZSH/custom/plugins/fzf-tab/fzf-tab.plugin.zsh" || true

# colored man pages ðŸ˜Ž
export LESS_TERMCAP_mb=$'\e[1;31m'
export LESS_TERMCAP_md=$'\e[1;36m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[1;44;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;32m'

# user files (if you keep them in ~)
[[ -f "$HOME/.zsh_aliases" ]] && source "$HOME/.zsh_aliases"
[[ -f "$HOME/.zsh_env" ]] && source "$HOME/.zsh_env"

# Load p10k if installed
[[ -f "${ZSH_CUSTOM:-$ZSH/custom}/themes/powerlevel10k/powerlevel10k.zsh-theme" ]] && source "${ZSH_CUSTOM:-$ZSH/custom}/themes/powerlevel10k/powerlevel10k.zsh-theme"
# --- end autogenerated ---
EOF
  info "Wrote .zshrc"
}

set_default_shell_to_zsh() {
  if [[ "$(basename "$(getent passwd "$USER" | cut -d: -f7 2>/dev/null || echo "")")" != "zsh" ]]; then
    if command -v chsh &>/dev/null; then
      if [[ $SILENT -eq 0 ]]; then
        ask_yes_no "Change default shell to /usr/bin/zsh for $USER? [y/N]: " || { info "Skipping chsh."; return; }
      fi
      info "Changing default shell to /usr/bin/zsh..."
      chsh -s "$(command -v zsh)" || err "chsh failed. You may need to run manually with sudo."
    else
      info "chsh not available â€” please change your shell to zsh manually."
    fi
  else
    info "Default shell already zsh."
  fi
}

# ---------- main ----------
if [[ "${1:-}" == "--silent" ]]; then
  SILENT=1
fi

debug "Starting dotfile install..."
check_internet
ensure_yay
install_packages
install_gdm
enable_services
copy_workspace

# ensure git & zsh are available before oh-my-zsh steps
if ! command -v git &>/dev/null || ! command -v zsh &>/dev/null; then
  info "git and/or zsh missing after package install â€” attempting to install minimal via pacman..."
  if command -v pacman &>/dev/null; then
    sudo pacman -S --noconfirm --needed git zsh curl wget || true
  fi
fi

install_oh_my_zsh
install_powerlevel10k
install_plugins
write_zshrc

# switch shell at the end
chsh -s /usr/bin/zsh || true

info "âœ… All done! Merged configs, installed packages, set up oh-my-zsh + p10k + plugins, enabled GDM, and made sure PipeWire + NetworkManager are running."
info "Backup of any previous .zshrc saved as ~/.zshrc.bak.<ts> if it existed. Run 'exec zsh' to start the new shell and 'p10k configure' to tweak the theme."

