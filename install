
# Check for GDM and install/enable if missing
if ! command -v gdm &> /dev/null; then
	echo "[DEBUG] GDM not found. Installing gdm..."
	sudo pacman -S --noconfirm gdm
else
	echo "[DEBUG] GDM is already installed."
fi
echo "[DEBUG] Enabling and starting GDM service..."
sudo systemctl enable gdm
sudo systemctl start gdm
#!/bin/bash

# Check for internet connectivity before doing anything
echo "[DEBUG] Checking internet connectivity..."
if ! ping -c 1 archlinux.org &>/dev/null; then
	echo "[ERROR] No internet connection detected. Aborting."
	exit 1
fi
echo "[DEBUG] Internet connection detected."
PKGS=(
	htop btop hyprland hyprpaper grimblast hyprpicker waybar rofi-wayland rofi-emoji swaync waypaper xdg-desktop-portal-hyprland kitty thunar pluma qt5ct qt6ct cmake cpio glaze hyprland-protocols uwsm grimblast-git libnotify hyprpicker wl-clipboard otf-font-awesome xsel xclip gvfs slurp grim zsh imagemagick python-pygments libcanberra catfish gvfs tumbler thunar-volman thunar-archive-plugin thunar-media-tags-plugin ffmpegthumbnailer poppler-glib yt-dlp ffmpeg libgsf nvim vi vim nano less git curl wget aria2 microsoft-edge-stable libgepub libopenraw freetype2 plocate zeitgeist python-requests file-roller unzip unrar discord pipewire pipewire-alsa pipewire-jack pipewire-pulse pipewire-v4l2 gst-plugin-pipewire wireplumber pavucontrol pamixer pulsemixer paprefs networkmanager network-manager-applet nm-connection-editor libnm networkmanager-openvpn networkmanager-pptp networkmanager-vpnc networkmanager-openconnect networkmanager-l2tp networkmanager-strongswan cliphist bat yay wlogout ttf-jetbrains-mono-nerd fcitx5 fcitx5-configtool fcitx5-qt fcitx5-gtk fcitx5-mozc fastfetch dracula-gtk-theme colloid-icon-theme
)

echo "[DEBUG] Installing packages with yay..."
yay -Syu --noconfirm --needed "${PKGS[@]}"
if ! command -v yay &> /dev/null; then
	echo "[DEBUG] yay not found. Installing yay..."
	sudo pacman -S --needed git base-devel
	git clone https://aur.archlinux.org/yay.git /tmp/yay
	cd /tmp/yay
	makepkg -si --noconfirm
	cd "$WORKSPACE_DIR"
else
	echo "[DEBUG] yay is already installed."
fi
#!/bin/bash

# Usage: ./install [--silent]
# Merges files and directories from this workspace into the user's home directory (~).
# If a file/directory exists in ~, it will be replaced after confirmation (unless --silent is used).

SILENT=0
if [[ "$1" == "--silent" ]]; then
	SILENT=1
fi

WORKSPACE_DIR="$(cd "$(dirname "$0")" && pwd)"
HOME_DIR="$HOME"


for ITEM in "$WORKSPACE_DIR"/* "$WORKSPACE_DIR"/.*; do
		BASENAME="$(basename "$ITEM")"
		TARGET="$HOME_DIR/$BASENAME"
		# Skip the install script itself and special directories
		if [[ "$BASENAME" == "install" || "$BASENAME" == "." || "$BASENAME" == ".." ]]; then
			echo "[DEBUG] Skipping: $BASENAME"
			continue
		fi
	echo "[DEBUG] Checking $BASENAME..."
	if [[ -e "$TARGET" ]]; then
		echo "[DEBUG] $TARGET exists."
		if [[ $SILENT -eq 0 ]]; then
			read -p "Replace $TARGET? [y/N]: " RESP
			if [[ ! "$RESP" =~ ^[Yy]$ ]]; then
				echo "[DEBUG] Skipped $BASENAME by user choice."
				continue
			fi
		fi
		if [[ -d "$TARGET" && ! -L "$TARGET" ]]; then
			echo "[DEBUG] Removing directory $TARGET"
			rm -rf "$TARGET"
		else
			echo "[DEBUG] Removing file or symlink $TARGET"
			rm -f "$TARGET"
		fi
		echo "[DEBUG] $BASENAME replaced."
	fi
	if [[ -d "$ITEM" && ! -L "$ITEM" ]]; then
		cp -r "$ITEM" "$TARGET"
		echo "[DEBUG] Installed directory $BASENAME to $HOME_DIR"
	else
		cp "$ITEM" "$TARGET"
		echo "[DEBUG] Installed file $BASENAME to $HOME_DIR"
	fi
done
